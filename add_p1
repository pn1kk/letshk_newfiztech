import math

a = float(input())
b = float(input())
l = float(input())
x = float(input())
y = float(input())
r = float(input())
k = math.radians(float(input()))

# записываем данные

x_cur = l # переменная хранит текущую абсциссу луча
y_cur = 0 # переменная хранит текущую ординату луча
dx = math.cos(k) # первая производная проекции на ось абсцисс
dy = math.sin(k) # первая производная проекции на ось ординат
n = 0 #число отражений
lim = 10**10 #условная бесконечность, предельное значение числа значений

def cycle(x_cur, y_cur):
    #проверяет, не вернулся ли луч в исходную точку, тк если да, то пересечений не будет
    if x_cur == l and y_cur == 0 and dx = math.cos(k) and dy = math.sin(k):
        return True
    else:
        return False

def shag(x_cur, y_cur, dx, dy):
    #вычисляет следующее положение луча
    #еще отражает луч от стенки, те меняет ее траекторию
    if dx > 0:
        if dy > 0:
            if x_cur + (b-y_cur)*dx/dy <= a:
                x_cur += (b-y_cur)*dx/dy
                y_cur = b
                dy = -dy
            else:
                y_cur = (a - x_cur) * dy/dx
                x_cur = a
                dx = -dx
        else:
            if x_cur + y_cur*dx/(-dy) <= a:
                x_cur += y_cur*dx/(-dy)
                y_cur = 0
                dy = -dy
            else:
                y_cur += (a - x_cur) * (dy)/dx
                x_cur = a
                dx = -dx
    else:
        if dy >= 0:
            if x_cur + (b - y_cur)*dx/dy > 0:
                x_cur += (b - y_cur)*dx/dy
                y_cur = b
            else:
                y_cur += x_cur*(-dx)/dy
                x_cur = 0
        else:
            if x_cur + (b - y_cur)*dx/dy > 0:
                x_cur += (b - y_cur)*dx/dy
                y_cur = 0
            else:
                 y_cur += x_cur*(-dy)/dx
                 x_cur = 0

def s(x, y, x_old, y_old, x_cur, y_cur):
    # функция определяет расстояние от отрезка (старое положение - новое положение) до центра окружности
    # длина отрезка AB
    segsq = (x_cur - x_old) ** 2 + (y_cur - y_old) ** 2
    if segsq == 0:
        # отрезок - точка
        return math.sqrt((x - x_old) ** 2 + (y - y_old) ** 2)

        # ищем проекцию центра окр-ти на прямую
        # t - параметр, определяющий положение проекции на прямой
        # при t < 0, то проекция находится за пределами отрезка (ближе к старой)
        # при t > 1, то проекция находится за пределами отрезка (ближе к новой)
    t = ((x - x_old) * (x_cur - x_old) + (y - y_old) * (y_cur - y_old)) / segsq

    # находится ли проекция на отрезке
    if t < 0:
        # проекция находится за пределами отрезка (ближе к старой)
        return math.sqrt((x - x_old) ** 2 + (y - y_old) ** 2)  # расстояние от центра окр-ти до старой точки
    elif t > 1:
        # проекция находится за пределами отрезка AB (ближе к новой)
        return math.sqrt((x - x_cur) ** 2 + (y - y_cur) ** 2)  # расстояние от центра окр-ти до новой точки
    else:
        # проекция находится на отрезке
        proj_x = x_old + t * (x_cur - x_old)
        proj_y = y_old + t * (y_cur - y_old)

        # Вычисляем расстояние от P до проекции
        return math.sqrt((x - proj_x) ** 2 + (y - proj_y) ** 2)

def is_answer(p):
    # проверяем, является ли расстояние меньше радиуса, те пересекает ли отрезок окр-ть
    if p <= r:
        return True
    else:
        return False

x_old = x_cur
y_old = y_cur
shag(x_cur, y_cur, dx, dy)
p = s(x, y, x_old, y_old, x_cur, y_cur)

#первое перемещение и отражение 

while is_answer(p) == False and n != lim and is_cycle(x_cur, y_cur) == False:
    #цикл проверяет, не пересек ли прошлым ходом луч окр-ть, и переносит луч до следующего положения 
    n += 1
    x_old = x_cur
    y_old = y_cur
    shag(x_cur, y_cur, dx, dy)
    p = s(x, y, x_old, y_old, x_cur, y_cur)

if n != lim:
    print(n)
else:
    print('никогда не пересечет')
